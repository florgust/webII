openapi: 3.0.0
info:
  title: API de Usuários
  version: 1.0.0
  description: Documentação da API de Usuários

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Usuario:
      type: object
      properties:
        id:
          type: integer
          description: ID do usuário
        nome:
          type: string
          description: Nome do usuário
        email:
          type: string
          description: E-mail do usuário
        data_nascimento:
          type: string
          format: date
          description: Data de nascimento do usuário (formato YYYY-MM-DD)
        status:
          type: integer
          description: Status do usuário (1 para ativo, 0 para inativo)
        apelido:
          type: string
          description: Apelido do usuário
        tipo_usuario:
          type: string
          description: Tipo do usuário (ex.: admin, comum)
    Filme:
      type: object
      properties:
        id:
          type: integer
          description: ID do filme
        nome:
          type: string
          description: Nome do filme
        diretor:
          type: string
          description: Diretor do filme
        anoLancamento:
          type: integer
          description: Ano de lançamento do filme
        duracao:
          type: integer
          description: Duração do filme em minutos
        produtora:
          type: string
          description: Produtora do filme
        classificacao:
          type: string
          description: Classificação indicativa do filme
        poster:
          type: string
          description: URL do pôster do filme
        status:
          type: integer
          description: Status do filme (1 para ativo, 0 para inativo)
        createdAt:
          type: string
          format: date-time
          description: Data de criação do registro
        updatedAt:
          type: string
          format: date-time
          description: Data da última atualização do registro
    Avaliacao:
      type: object
      properties:
        id:
          type: integer
          description: ID da avaliação
        idUsuario:
          type: integer
          description: ID do usuário que realizou a avaliação
        idFilme:
          type: integer
          description: ID do filme avaliado
        nota:
          type: number
          description: Nota da avaliação (0 a 10)
        comentario:
          type: string
          description: Comentário sobre o filme
        status:
          type: integer
          description: Status da avaliação (1 para ativo, 0 para inativo)
        createdAt:
          type: string
          format: date-time
          description: Data de criação da avaliação
        updatedAt:
          type: string
          format: date-time
          description: Data da última atualização da avaliação
    Genero:
      type: object
      properties:
        id:
          type: integer
          description: ID do gênero
        descricao:
          type: string
          description: Descrição do gênero
        status:
          type: integer
          description: Status do gênero (1 para ativo, 0 para inativo)
        createdAt:
          type: string
          format: date-time
          description: Data de criação do registro
        updatedAt:
          type: string
          format: date-time
          description: Data da última atualização do registro
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Mensagem de erro

paths:
  /usuarios:
    get:
      tags:
        - Usuarios
      summary: Busca todos os usuários ativados
      security:
        - bearerAuth: []
      description: Busca todos os usuários em que o status é igual 1, ou seja, usuários ativados
      responses:
        200:
          description: Lista de usuários retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: ID do usuário
                    nome:
                      type: string
                      description: Nome do usuário
                    email:
                      type: string
                      description: E-mail do usuário
                    data_nascimento:
                      type: string
                      format: date
                      description: Data de nascimento do usuário (formato YYYY-MM-DD)
                    status:
                      type: integer
                      description: Status do usuário (1 para ativo, 0 para inativo)
                    apelido:
                      type: string
                      description: Apelido do usuário
                    tipo_usuario:
                      type: string
                      description: Tipo do usuário (ex.: admin, comum)
        500:
          description: Erro interno do servidor
  /usuario/{id}:
    get:
      tags:
        - Usuarios
      summary: Busca um usuário pelo ID
      security:
        - bearerAuth: []
      description: Retorna os dados de um usuário específico com base no ID fornecido.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário a ser buscado
          schema:
            type: integer
      responses:
        200:
          description: Dados do usuário retornados com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        404:
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Usuarios
      summary: Atualiza os dados de um usuário
      security:
        - bearerAuth: []
      description: Atualiza os dados de um usuário específico com base no ID fornecido.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário a ser atualizado
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
                  description: Nome do usuário
                email:
                  type: string
                  description: E-mail do usuário
                senha:
                  type: string
                  description: Senha do usuário
                data_nascimento:
                  type: string
                  format: date
                  description: Data de nascimento do usuário (formato YYYY-MM-DD)
                status:
                  type: integer
                  description: Status do usuário (1 para ativo, 0 para inativo)
                apelido:
                  type: string
                  description: Apelido do usuário
                tipo_usuario:
                  type: string
                  description: Tipo do usuário (ex.: admin, comum)
              required: [] # Nenhum campo é obrigatório
      responses:
        200:
          description: Usuário atualizado com sucesso
        400:
          description: Erro na requisição
        404:
          description: Usuário não encontrado
        500:
          description: Erro interno do servidor
  /usuario:
    post:
      tags:
        - Usuarios
      summary: Cria um novo usuário
      description: Adiciona um novo usuário ao sistema com base nas informações fornecidas.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
                  description: Nome do novo usuário
                email:
                  type: string
                  description: E-mail do novo usuário
                senha:
                  type: string
                  description: Senha do novo usuário
                data_nascimento:
                  type: string
                  format: date
                  description: Data de nascimento do novo usuário (formato YYYY-MM-DD)
                status:
                  type: integer
                  description: Status do usuário (1 para ativo, 0 para inativo)
                apelido:
                  type: string
                  description: Apelido do novo usuário
                tipo_usuario:
                  type: string
                  description: Tipo do usuário (ex.: admin, comum)
      responses:
        201:
          description: Usuário criado com sucesso
        400:
          description: Erro na requisição
  /usuario/{id}/delete:
    put:
      tags:
        - Usuarios
      summary: Realiza o delete lógico de um usuário
      security:
        - bearerAuth: []
      description: Atualiza o status do usuário para 0 (inativo), indicando um delete lógico.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário a ser deletado logicamente
          schema:
            type: integer
      responses:
        200:
          description: Usuário deletado logicamente com sucesso
        404:
          description: Usuário não encontrado
        500:
          description: Erro interno do servidor
  
  /filmes:
    get:
      tags:
        - Filme
      summary: Busca todos os filmes
      description: Retorna uma lista de todos os filmes cadastrados
      responses:
        200:
          description: Lista de filmes retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Filme'
        500:
          description: Erro interno do servidor
  /filme/{id}:
    get:
      tags:
        - Filme
      summary: Busca um filme pelo ID
      description: Retorna os dados de um filme específico com base no ID fornecido
      parameters:
        - name: id
          in: path
          required: true
          description: ID do filme a ser buscado
          schema:
            type: integer
      responses:
        200:
          description: Dados do filme retornados com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filme'
        404:
          description: Filme não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor
    put:
      tags:
        - Filme
      summary: Atualiza os dados de um filme
      security:
        - bearerAuth: []
      description: Atualiza os dados de um filme específico com base no ID fornecido
      parameters:
        - name: id
          in: path
          required: true
          description: ID do filme a ser atualizado
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filme'
      responses:
        200:
          description: Filme atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filme'
        400:
          description: Erro na requisição
        404:
          description: Filme não encontrado
        500:
          description: Erro interno do servidor
  /filmes/{nome}:
    get:
      tags:
        - Filme
      summary: Busca um filme pelo nome
      description: Retorna os dados de um filme específico com base no nome fornecido
      parameters:
        - name: nome
          in: path
          required: true
          description: Nome do filme a ser buscado
          schema:
            type: string
      responses:
        200:
          description: Dados do filme retornados com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filme'
        404:
          description: Filme não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor
  /filme:
    post:
      tags:
        - Filme
      summary: Cria um novo filme
      security:
        - bearerAuth: []
      description: Adiciona um novo filme ao sistema com base nas informações fornecidas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filme'
      responses:
        201:
          description: Filme criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filme'
        400:
          description: Erro na requisição
        500:
          description: Erro interno do servidor
  /filme/{id}/delete:
      put:
        tags:
          - Filme
        summary: Realiza o delete lógico de um filme
        security:
          - bearerAuth: []
        description: Atualiza o status do filme para 0 (inativo), indicando um delete lógico.
        parameters:
          - name: id
            in: path
            required: true
            description: ID do filme a ser deletado logicamente
            schema:
              type: integer
        responses:
          200:
            description: filme deletado logicamente com sucesso
          404:
            description: filme não encontrado
          500:
            description: Erro interno do servidor
  
  /avaliacoes/filme/{id}:
    get:
      tags:
        - Avaliacoes
      summary: Busca avaliações por filme
      description: Retorna todas as avaliações ativas de um filme específico com base no ID fornecido.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do filme a ser buscado
          schema:
            type: integer
      responses:
        200:
          description: Lista de avaliações retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Avaliacao'
        404:
          description: Nenhuma avaliação encontrada para o filme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /avaliacoes/media/filme/{id}:
    get:
      tags:
        - Avaliacoes
      summary: Busca a média das avaliações por filme
      description: Retorna a média de todas as avaliações ativas de um filme específico com base no ID fornecido.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do filme a ser buscado
          schema:
            type: integer
      responses:
        200:
          description: média de avaliações retornada com sucesso
          content:
            application/json:
              schema:
                type: integer
        404:
          description: média não encontrada para o filme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /avaliacoes/usuario/{id}:
    get:
      tags:
        - Avaliacoes
      summary: Busca avaliações por usuário
      description: Retorna todas as avaliações ativas de um usuário específico com base no ID fornecido.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário a ser buscado
          schema:
            type: integer
      responses:
        200:
          description: Lista de avaliações retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Avaliacao'
        404:
          description: Nenhuma avaliação encontrada para o usuário
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /avaliacao:
    post:
      tags:
        - Avaliacoes
      summary: Cria uma nova avaliação
      description: Adiciona uma nova avaliação ao sistema com base nas informações fornecidas.
      parameters:
        - name: idusuario
          in: header
          required: true
          description: ID do usuário que está criando a avaliação
          schema:
            type: integer
        - name: idfilme
          in: header
          required: true
          description: ID do filme que está sendo avaliado
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nota:
                  type: number
                  description: Nota da avaliação (0 a 10)
                comentario:
                  type: string
                  description: Comentário sobre o filme
              required:
                - nota
      responses:
        201:
          description: Avaliação criada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Avaliacao'
        400:
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /avaliacao/{id}:
    put:
      tags:
        - Avaliacoes
      summary: Atualiza uma avaliação
      security:
        - bearerAuth: []
      description: Atualiza os dados de uma avaliação específica com base no ID fornecido.
      parameters:
        - name: idusuario
          in: header
          required: true
          description: ID do usuário que está criando a avaliação
          schema:
            type: integer
      parameters:
        - name: id
          in: path
          required: true
          description: ID da avaliação a ser atualizada
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nota:
                  type: number
                  description: Nota da avaliação (0 a 10)
                comentario:
                  type: string
                  description: Comentário sobre o filme
              required: []
      responses:
        200:
          description: Avaliação atualizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Avaliacao'
        404:
          description: Avaliação não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /avaliacao/{id}/delete:
    put:
      tags:
        - Avaliacoes
      summary: Realiza o delete lógico de uma avaliação
      security:
        - bearerAuth: []
      description: Atualiza o status da avaliação para 0 (inativo), indicando um delete lógico.
      parameters:
        - name: id
          in: path
          required: true
          description: ID da avaliação a ser deletada logicamente
          schema:
            type: integer
      responses:
        200:
          description: Avaliação deletada logicamente com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Avaliacao'
        404:
          description: Avaliação não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /generos:
    get:
      tags:
        - Genero
      summary: Busca todos os gêneros
      description: Retorna uma lista de todos os gêneros cadastrados
      responses:
        200:
          description: Lista de gêneros retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genero'
        500:
          description: Erro interno do servidor
  /genero/{id}:
    get:
      tags:
        - Genero
      summary: Busca um gênero pelo ID
      description: Retorna os dados de um gênero específico com base no ID fornecido
      parameters:
        - name: id
          in: path
          required: true
          description: ID do gênero a ser buscado
          schema:
            type: integer
      responses:
        200:
          description: Dados do gênero retornados com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genero'
        404:
          description: Gênero não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor

    put:
      tags:
        - Genero
      summary: Atualiza os dados de um gênero
      security:
        - bearerAuth: []
      description: Atualiza os dados de um gênero específico com base no ID fornecido
      parameters:
        - name: id
          in: path
          required: true
          description: ID do gênero a ser atualizado
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genero'
      responses:
        200:
          description: Gênero atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genero'
        400:
          description: Erro na requisição
        404:
          description: Gênero não encontrado
        500:
          description: Erro interno do servidor
  /genero:
    post:
      tags:
        - Genero
      summary: Cria um novo gênero
      security:
        - bearerAuth: []
      description: Adiciona um novo gênero ao sistema com base nas informações fornecidas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genero'
      responses:
        201:
          description: Gênero criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genero'
        400:
          description: Erro na requisição
        500:
          description: Erro interno do servidor
  /genero/{id}/delete:
    put:
      tags:
        - Genero
      summary: Realiza o delete lógico de um gênero
      security:
        - bearerAuth: []
      description: Atualiza o status do gênero para 0 (inativo), indicando um delete lógico.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do gênero a ser deletado logicamente
          schema:
            type: integer
      responses:
        200:
          description: Gênero deletado logicamente com sucesso
        404:
          description: Gênero não encontrado
        500:
          description: Erro interno do servidor

  /genero_filme/all/{id}:
    get:
      tags:
        - GeneroFilme
      summary: Busca todas os dados da tabela genero_filme à partir de um filme
      description: Retorna todos os dados da tabela genero_filme associados ao filme informado.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do filme
          schema:
            type: integer
      responses:
        200:
          description: Lista de dados retornados com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Filme'
        404:
          description: Nenhum genero_filme encontrado para o gênero
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor
  /genero_filme/filmes/{id}:
    get:
      tags:
        - GeneroFilme
      summary: Busca todos os filmes de um gênero específico
      description: Retorna uma lista de filmes ativos associados ao gênero informado.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do gênero
          schema:
            type: integer
      responses:
        200:
          description: Lista de filmes retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Filme'
        404:
          description: Nenhum filme encontrado para o gênero
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor
  /genero_filme/generos/{id}:
    get:
      tags:
        - GeneroFilme
      summary: Busca todos os gêneros de um filme específico
      description: Retorna uma lista de gêneros ativos associados ao filme informado.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do filme
          schema:
            type: integer
      responses:
        200:
          description: Lista de gêneros retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: ID do gênero
                    descricao:
                      type: string
                      description: Descrição do gênero
        404:
          description: Nenhum gênero encontrado para o filme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor
  /genero_filme:
    post:
      tags:
        - GeneroFilme
      summary: Associa um gênero a um filme
      security:
        - bearerAuth: []
      description: Cria uma nova associação entre um gênero e um filme.
      parameters:
        - name: idgenero
          in: header
          required: true
          description: ID do gênero
          schema:
            type: integer
        - name: idfilme
          in: header
          required: true
          description: ID do filme
          schema:
            type: integer
      responses:
        201:
          description: Associação criada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  idGenero:
                    type: integer
                  idFilme:
                    type: integer
                  status:
                    type: integer
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        400:
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor
  /genero_filme/{id}:
    put:
      tags:
        - GeneroFilme
      summary: Atualiza a associação entre gênero e filme
      security:
        - bearerAuth: []
      description: Atualiza os dados de uma associação específica entre gênero e filme.
      parameters:
        - name: id
          in: path
          required: true
          description: ID da associação genero_filme
          schema:
            type: integer
        - name: idgenero
          in: header
          required: true
          description: Novo ID do gênero
          schema:
            type: integer
        - name: idfilme
          in: header
          required: true
          description: Novo ID do filme
          schema:
            type: integer
      responses:
        200:
          description: Associação atualizada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  idGenero:
                    type: integer
                  idFilme:
                    type: integer
                  status:
                    type: integer
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        400:
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Associação não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor
  /genero_filme/{id}/delete:
    put:
      tags:
        - GeneroFilme
      summary: Realiza o delete lógico da associação genero_filme
      security:
        - bearerAuth: []
      description: Atualiza o status da associação para 0 (inativo), indicando um delete lógico.
      parameters:
        - name: id
          in: path
          required: true
          description: ID da associação genero_filme a ser deletada logicamente
          schema:
            type: integer
      responses:
        200:
          description: Associação deletada logicamente com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        404:
          description: Associação não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Erro interno do servidor

  /autenticacao:
    post:
      tags:
        - Autenticacao
      summary: Realiza login do usuário
      description: Autentica o usuário e retorna um token JWT para uso nas demais rotas protegidas.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: usuario@email.com
                  description: E-mail do usuário
                senha:
                  type: string
                  example: senha123
                  description: Senha do usuário
              required:
                - email
                - senha
      responses:
        200:
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Token JWT para autenticação
        401:
          description: Usuário ou senha inválidos
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: Usuário ou senha inválidos
        500:
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'